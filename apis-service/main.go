package main

import (
	"os"

	"fmt"
	"local_packages/api"
	"local_packages/api/services"
	"local_packages/database"
	"log"

	//"log"
	//"os"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/robfig/cron"
	gorm "gorm.io/gorm"

	"github.com/gin-gonic/gin"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// @title API Title
// @description This is a sample server for a pet store.
// @version 1.0"os"
// @termsOfService http://terms-of-service-url.com
// @contact name Developer Support email support@email.com
// @license name Apache 2.0 url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8088
// @BasePath /
// @schemes http https
func main() {
	log.Println(" serevet starting ....")
	log.Println(" serevet starting ....")
	log.Println(" serevet starting ....")


	var gorm *gorm.DB
	var dbpool *pgxpool.Pool
	dbpool, gorm = database.InitDB()
	svc := services.NewService(dbpool, gorm)
	log.SetOutput(os.Stdout)

	router := gin.Default()
	api.SetupRoutes(router, svc)

	router.StaticFile("/koko", "./docs/swagger.json")
	router.StaticFile("/swagger/doc.json", "./docs/swagger.json")
	
    // URL to the Swagger JSON (it's generated by swag init command)
	swaggerURL := ginSwagger.URL("http://localhost:8088/swagger/doc.json")

	router.GET("/swagger-ui/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, swaggerURL))
		// Retrieve IP address and port of the server
		ip, port := getServerAddress()
		log.Println("Server IP: %s, Port: %d\n", ip, port)
		fmt.Printf("Server IP: %s, Port: %d\n", ip, port)
		


	// Start the cron job
	startCronJob(svc)
		
	router.Run(":8088")
}




func startCronJob(svc *services.Service) {
    c := cron.New()

    // Define your cron job
    c.AddFunc("@every 59m", func() {
        // Call the cron job function from your service
        err := svc.CronJobHealthCheck()
		log.Println("cron job running ....")
        if err != nil {
            log.Println("Error running cron job:", err)
        }
    })

    // Start the cron scheduler
    c.Start()
}


// Function to retrieve the IP address and port of the server

